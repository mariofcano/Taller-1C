package com.biblioteca.digital.controller;

import com.biblioteca.digital.service.BookService;
import com.biblioteca.digital.service.UserService;
import com.biblioteca.digital.service.LoanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * CONTROLADOR PRINCIPAL PARA LA GESTION DE RUTAS PUBLICAS DEL SISTEMA DE BIBLIOTECA DIGITAL
 *
 * ESTA CLASE IMPLEMENTA TODOS LOS ENDPOINTS PRINCIPALES PARA LAS PAGINAS PUBLICAS
 * DEL SISTEMA DE BIBLIOTECA DIGITAL. MANEJO LAS RUTAS DE ACCESO GENERAL QUE NO REQUIEREN
 * AUTENTICACION COMO LA PAGINA PRINCIPAL, CATALOGO PUBLICO, LOGIN Y REGISTRO.
 *
 * EL CONTROLADOR COORDINA LAS OPERACIONES ENTRE LAS CAPAS DE SERVICIO Y LAS VISTAS,
 * PREPARANDO TODOS LOS DATOS NECESARIOS PARA QUE LAS PLANTILLAS THYMELEAF PUEDAN
 * RENDERIZAR CORRECTAMENTE LA INFORMACION DEL SISTEMA.
 *
 * IMPLEMENTO UN DISEÃ‘O CENTRADO EN LA EXPERIENCIA DE USUARIO, PROPORCIONANDO
 * INTERFACES INTUITIVAS Y ESTADISTICAS RELEVANTES EN TIEMPO REAL PARA MOSTRAR
 * EL ESTADO ACTUAL DE LA BIBLIOTECA DIGITAL.
 *
 * @author MARIO FLORES
 * @version 1.0
 * @since 2025-05-26
 *
 * @see BookService
 * @see UserService
 * @see LoanService
 * @see org.springframework.stereotype.Controller
 */
@Controller
public class MainController {

    /**
     * SERVICIO DE GESTION DE LIBROS DEL SISTEMA
     *
     * INYECTO EL SERVICIO DE LIBROS QUE ME PROPORCIONA TODAS LAS OPERACIONES
     * NECESARIAS PARA CONSULTAR EL CATALOGO, OBTENER ESTADISTICAS DE INVENTARIO
     * Y GESTIONAR LA INFORMACION BIBLIOGRAFICA QUE MUESTRO EN LAS INTERFACES.
     */
    @Autowired
    private BookService bookService;

    /**
     * SERVICIO DE GESTION DE USUARIOS DEL SISTEMA
     *
     * INYECTO EL SERVICIO DE USUARIOS PARA ACCEDER A FUNCIONALIDADES DE REGISTRO,
     * AUTENTICACION Y ESTADISTICAS DE USUARIOS ACTIVOS QUE NECESITO MOSTRAR
     * EN LOS DASHBOARDS Y PAGINAS DE INFORMACION GENERAL.
     */
    @Autowired
    private UserService userService;

    /**
     * SERVICIO DE GESTION DE PRESTAMOS DEL SISTEMA
     *
     * INYECTO EL SERVICIO DE PRESTAMOS PARA OBTENER ESTADISTICAS DE ACTIVIDAD,
     * PRESTAMOS ACTIVOS Y METRICAS OPERACIONALES QUE ENRIQUECEN LA EXPERIENCIA
     * DEL USUARIO AL MOSTRAR EL NIVEL DE ACTIVIDAD DE LA BIBLIOTECA.
     */
    @Autowired
    private LoanService loanService;

    /**
     * RENDERIZA LA PAGINA PRINCIPAL DEL SISTEMA DE BIBLIOTECA DIGITAL
     *
     * ESTE METODO MANEJA LA RUTA RAIZ DEL SISTEMA Y SE ENCARGA DE PREPARAR
     * TODOS LOS DATOS ESTADISTICOS Y DE CONTENIDO DESTACADO QUE NECESITO
     * MOSTRAR EN LA PAGINA DE INICIO. RECOPILO INFORMACION EN TIEMPO REAL
     * SOBRE EL ESTADO DEL CATALOGO, USUARIOS ACTIVOS Y PRESTAMOS VIGENTES.
     *
     * LA PAGINA PRINCIPAL FUNCIONA COMO DASHBOARD PUBLICO QUE PERMITE A LOS
     * VISITANTES CONOCER EL VOLUMEN Y ACTIVIDAD DE LA BIBLIOTECA SIN NECESIDAD
     * DE AUTENTICACION. TAMBIEN MUESTRO LOS LIBROS DESTACADOS PARA PROMOVER
     * EL INTERES EN EL CATALOGO DISPONIBLE.
     *
     * IMPLEMENTO MANEJO ROBUSTO DE ERRORES PARA GARANTIZAR QUE LA PAGINA
     * SE RENDERICE CORRECTAMENTE INCLUSO SI ALGUNOS SERVICIOS NO ESTAN
     * DISPONIBLES TEMPORALMENTE.
     *
     * @param model OBJETO MODEL DE SPRING MVC QUE USO PARA PASAR DATOS A LA VISTA
     * @return NOMBRE DE LA PLANTILLA THYMELEAF "index" PARA RENDERIZAR LA PAGINA PRINCIPAL
     */
    @GetMapping("/")
    public String home(Model model) {
        try {
            // OBTENGO ESTADISTICAS GENERALES DEL SISTEMA PARA EL DASHBOARD
            // ESTAS METRICAS PROPORCIONAN UNA VISION GENERAL DEL ESTADO DE LA BIBLIOTECA

            // CUENTO EL TOTAL DE LIBROS ACTIVOS EN EL CATALOGO
            long totalBooks = bookService.countActiveBooks();
            model.addAttribute("totalBooks", totalBooks);

            // CALCULO CUANTOS LIBROS TIENEN COPIAS DISPONIBLES PARA PRESTAMO
            long availableBooks = bookService.countAvailableBooks();
            model.addAttribute("availableBooks", availableBooks);

            // OBTENGO EL NUMERO DE PRESTAMOS ACTUALMENTE VIGENTES
            long activeLoans = loanService.countActiveLoans();
            model.addAttribute("activeLoans", activeLoans);

            // CUENTO LOS USUARIOS REGISTRADOS Y ACTIVOS EN EL SISTEMA
            int totalUsers = userService.findAllActiveUsers().size();
            model.addAttribute("totalUsers", totalUsers);

            // RECUPERO LOS LIBROS MARCADOS COMO DESTACADOS PARA PROMOCIONAR
            // EN LA SECCION PRINCIPAL DE LA PAGINA DE INICIO
            model.addAttribute("featuredBooks", bookService.findFeaturedBooks());

        } catch (Exception e) {
            // SI OCURRE CUALQUIER ERROR AL CARGAR LOS DATOS, REGISTRO EL PROBLEMA
            // PERO PERMITO QUE LA PAGINA SE MUESTRE CON UN MENSAJE DE ERROR
            // ESTO GARANTIZA QUE EL SISTEMA SIGA SIENDO ACCESIBLE INCLUSO
            // CUANDO HAY PROBLEMAS TEMPORALES CON LA BASE DE DATOS
            model.addAttribute("error", "ERROR AL CARGAR DATOS DEL SISTEMA: " + e.getMessage());
        }

        // RETORNO EL NOMBRE DE LA PLANTILLA QUE SPRING MVC DEBE RENDERIZAR
        return "index";
    }

    /**
     * RENDERIZA LA PAGINA DE INICIO DE SESION DEL SISTEMA
     *
     * ESTE ENDPOINT MANEJA LAS SOLICITUDES GET PARA MOSTRAR EL FORMULARIO
     * DE LOGIN A LOS USUARIOS QUE DESEAN AUTENTICARSE EN EL SISTEMA.
     * LA PAGINA DE LOGIN ES EL PUNTO DE ENTRADA PARA USUARIOS REGISTRADOS
     * QUE QUIEREN ACCEDER A FUNCIONALIDADES AVANZADAS COMO REALIZAR PRESTAMOS.
     *
     * NO REQUIERO LOGICA ADICIONAL EN ESTE METODO YA QUE SPRING SECURITY
     * SE ENCARGA DEL PROCESAMIENTO DE CREDENCIALES CUANDO EL USUARIO
     * ENVIE EL FORMULARIO VIA POST.
     *
     * @return NOMBRE DE LA PLANTILLA THYMELEAF "login" PARA EL FORMULARIO DE AUTENTICACION
     */
    @GetMapping("/login")
    public String login() {
        // RETORNO LA VISTA DE LOGIN SIN LOGICA ADICIONAL
        // SPRING SECURITY MANEJA LA AUTENTICACION AUTOMATICAMENTE
        return "login";
    }

    /**
     * RENDERIZA LA PAGINA DE REGISTRO DE NUEVOS USUARIOS
     *
     * ESTE METODO PROPORCIONA EL FORMULARIO DE REGISTRO DONDE LOS NUEVOS
     * VISITANTES PUEDEN CREAR UNA CUENTA EN EL SISTEMA DE BIBLIOTECA DIGITAL.
     * LA PAGINA DE REGISTRO ES FUNDAMENTAL PARA EL CRECIMIENTO DE LA BASE
     * DE USUARIOS Y LA ADOPCION DEL SISTEMA.
     *
     * MUESTRO UN FORMULARIO SIMPLE CON LOS CAMPOS NECESARIOS PARA CREAR
     * UNA CUENTA BASICA: USERNAME, EMAIL, PASSWORD Y NOMBRE COMPLETO.
     * EL PROCESAMIENTO DEL REGISTRO SE MANEJA EN UN CONTROLADOR SEPARADO.
     *
     * @return NOMBRE DE LA PLANTILLA THYMELEAF "register" PARA EL FORMULARIO DE REGISTRO
     */
    @GetMapping("/register")
    public String register() {
        // RETORNO LA VISTA DE REGISTRO PARA NUEVOS USUARIOS
        // EL PROCESAMIENTO DEL FORMULARIO SE MANEJA EN OTRO ENDPOINT
        return "register";
    }

    /**
     * RENDERIZA EL CATALOGO PUBLICO DE LIBROS DISPONIBLES
     *
     * ESTE ENDPOINT MUESTRA UNA VISTA PUBLICA DEL CATALOGO DE LIBROS
     * QUE PERMITE A LOS VISITANTES EXPLORAR LA COLECCION DISPONIBLE
     * SIN NECESIDAD DE AUTENTICACION. ES UNA HERRAMIENTA DE MARKETING
     * QUE INCENTIVA EL REGISTRO Y USO DEL SISTEMA.
     *
     * CARGO TODOS LOS LIBROS QUE TIENEN COPIAS DISPONIBLES PARA PRESTAMO
     * Y LOS ORGANIZO EN UNA VISTA ATRACTIVA CON INFORMACION BIBLIOGRAFICA
     * BASICA COMO TITULO, AUTOR, CATEGORIA Y DESCRIPCION.
     *
     * IMPLEMENTO MANEJO DE ERRORES PARA GARANTIZAR QUE LA PAGINA
     * SEA ACCESIBLE INCLUSO SI HAY PROBLEMAS TEMPORALES CON LA BASE DE DATOS.
     *
     * @param model OBJETO MODEL PARA PASAR DATOS DE LIBROS A LA VISTA
     * @return NOMBRE DE LA PLANTILLA THYMELEAF "catalog" PARA MOSTRAR EL CATALOGO
     */
    @GetMapping("/catalog")
    public String catalog(Model model) {
        try {
            // CARGO TODOS LOS LIBROS DISPONIBLES PARA MOSTRAR EN EL CATALOGO
            // SOLO INCLUYO LIBROS ACTIVOS CON COPIAS DISPONIBLES PARA PRESTAMO
            model.addAttribute("books", bookService.findAvailableBooks());

        } catch (Exception e) {
            // SI HAY ERROR AL CARGAR EL CATALOGO, MUESTRO UN MENSAJE DE ERROR
            // PERO PERMITO QUE LA PAGINA SE RENDERICE PARA MANTENER LA EXPERIENCIA
            model.addAttribute("error", "ERROR AL CARGAR EL CATALOGO: " + e.getMessage());
        }

        // RETORNO LA VISTA DEL CATALOGO CON LOS LIBROS CARGADOS
        return "catalog";
    }

    /**
     * RENDERIZA LA PAGINA DE INFORMACION DE CONTACTO
     *
     * ESTE ENDPOINT PROPORCIONA UNA PAGINA ESTATICA CON INFORMACION
     * DE CONTACTO DE LA BIBLIOTECA, HORARIOS DE ATENCION, DIRECCION
     * Y OTROS DATOS RELEVANTES PARA LOS USUARIOS QUE NECESITEN
     * COMUNICARSE CON EL PERSONAL DE LA BIBLIOTECA.
     *
     * ES UNA PAGINA INFORMATIVA SIMPLE QUE NO REQUIERE DATOS DINAMICOS
     * DEL SISTEMA, SOLO CONTENIDO ESTATICO DEFINIDO EN LA PLANTILLA.
     *
     * @return NOMBRE DE LA PLANTILLA THYMELEAF "contact" CON INFORMACION DE CONTACTO
     */
    @GetMapping("/contact")
    public String contact() {
        // RETORNO LA PAGINA ESTATICA DE CONTACTO
        // NO REQUIERE LOGICA ADICIONAL, SOLO CONTENIDO INFORMATIVO
        return "contact";
    }
}