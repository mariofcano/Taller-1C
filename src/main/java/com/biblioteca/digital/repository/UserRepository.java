package com.biblioteca.digital.repository;

import com.biblioteca.digital.model.User;
import com.biblioteca.digital.model.UserRole;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * REPOSITORIO JPA PARA LA GESTION DE ENTIDADES USER
 *
 * ESTA INTERFAZ EXTIENDE JpaRepository PARA PROPORCIONAR OPERACIONES CRUD
 * AUTOMATICAS Y DEFINE METODOS DE CONSULTA PERSONALIZADOS PARA LA ENTIDAD USER.
 * SPRING DATA JPA GENERA AUTOMATICAMENTE LA IMPLEMENTACION DE ESTOS METODOS.
 *
 * EL REPOSITORIO INCLUYE CONSULTAS OPTIMIZADAS PARA BUSQUEDAS FRECUENTES,
 * FILTROS POR DIFERENTES CRITERIOS Y OPERACIONES ESPECIALIZADAS PARA
 * LA GESTION DE USUARIOS EN EL SISTEMA DE BIBLIOTECA DIGITAL.
 *
 * @author MARIO FLORES
 * @version 1.0
 * @since 2025-05-26
 *
 * @see User
 * @see UserRole
 * @see org.springframework.data.jpa.repository.JpaRepository
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    /**
     * BUSCA UN USUARIO POR SU NOMBRE DE USUARIO
     *
     * METODO DE CONSULTA DERIVADA QUE PERMITE ENCONTRAR UN USUARIO ESPECIFICO
     * MEDIANTE SU USERNAME UNICO. UTILIZO OPTIONAL PARA MANEJAR CASOS DONDE
     * EL USUARIO NO EXISTE SIN LANZAR EXCEPCIONES.
     *
     * @param username NOMBRE DE USUARIO A BUSCAR
     * @return OPTIONAL CON EL USUARIO ENCONTRADO O VACIO SI NO EXISTE
     */
    Optional<User> findByUsername(String username);

    /**
     * BUSCA UN USUARIO POR SU EMAIL
     *
     * LOCALIZO UN USUARIO MEDIANTE SU DIRECCION DE CORREO ELECTRONICO.
     * ESTE METODO ES FUNDAMENTAL PARA PROCESOS DE AUTENTICACION Y
     * RECUPERACION DE CONTRASEÑAS EN EL SISTEMA.
     *
     * @param email DIRECCION DE EMAIL A BUSCAR
     * @return OPTIONAL CON EL USUARIO ENCONTRADO O VACIO SI NO EXISTE
     */
    Optional<User> findByEmail(String email);

    /**
     * VERIFICA SI EXISTE UN USUARIO CON EL USERNAME ESPECIFICADO
     *
     * METODO DE VALIDACION QUE COMPRUEBA LA DISPONIBILIDAD DE UN NOMBRE
     * DE USUARIO ANTES DE CREAR NUEVAS CUENTAS. EVITA CONFLICTOS CON
     * LA RESTRICCION DE UNICIDAD DE LA BASE DE DATOS.
     *
     * @param username NOMBRE DE USUARIO A VERIFICAR
     * @return TRUE SI EXISTE, FALSE EN CASO CONTRARIO
     */
    boolean existsByUsername(String username);

    /**
     * VERIFICA SI EXISTE UN USUARIO CON EL EMAIL ESPECIFICADO
     *
     * COMPRUEBO LA EXISTENCIA DE UN EMAIL EN EL SISTEMA PARA EVITAR
     * REGISTROS DUPLICADOS Y VALIDAR LA UNICIDAD DE DIRECCIONES
     * DE CORREO ELECTRONICO.
     *
     * @param email DIRECCION DE EMAIL A VERIFICAR
     * @return TRUE SI EXISTE, FALSE EN CASO CONTRARIO
     */
    boolean existsByEmail(String email);

    /**
     * BUSCA USUARIOS POR ROL ESPECIFICO
     *
     * OBTENGO TODOS LOS USUARIOS QUE TIENEN ASIGNADO UN ROL DETERMINADO.
     * UTIL PARA GENERAR LISTADOS DE ADMINISTRADORES, BIBLIOTECARIOS
     * O USUARIOS REGULARES DEL SISTEMA.
     *
     * @param role ROL A FILTRAR
     * @return LISTA DE USUARIOS CON EL ROL ESPECIFICADO
     */
    List<User> findByRole(UserRole role);

    /**
     * BUSCA USUARIOS ACTIVOS O INACTIVOS
     *
     * FILTRO USUARIOS SEGUN SU ESTADO DE ACTIVACION. PERMITE
     * GESTIONAR POR SEPARADO USUARIOS HABILITADOS Y DESHABILITADOS
     * EN EL SISTEMA.
     *
     * @param active ESTADO DE ACTIVACION A FILTRAR
     * @return LISTA DE USUARIOS CON EL ESTADO ESPECIFICADO
     */
    List<User> findByActive(Boolean active);

    /**
     * BUSCA USUARIOS ACTIVOS CON UN ROL ESPECIFICO
     *
     * COMBINO FILTROS DE ESTADO Y ROL PARA OBTENER USUARIOS ACTIVOS
     * QUE TENGAN UN ROL DETERMINADO. OPTIMIZA CONSULTAS FRECUENTES
     * EN LA ADMINISTRACION DEL SISTEMA.
     *
     * @param active ESTADO DE ACTIVACION
     * @param role ROL DEL USUARIO
     * @return LISTA DE USUARIOS ACTIVOS CON EL ROL ESPECIFICADO
     */
    List<User> findByActiveAndRole(Boolean active, UserRole role);

    /**
     * BUSCA USUARIOS CREADOS DESPUES DE UNA FECHA ESPECIFICA
     *
     * LOCALIZO USUARIOS REGISTRADOS POSTERIORMENTE A UNA FECHA DETERMINADA.
     * UTIL PARA ANALISIS DE CRECIMIENTO, REPORTES PERIODICOS Y
     * ESTADISTICAS DE REGISTRO DE NUEVOS USUARIOS.
     *
     * @param date FECHA DE CORTE PARA LA BUSQUEDA
     * @return LISTA DE USUARIOS REGISTRADOS DESPUES DE LA FECHA
     */
    List<User> findByCreatedAtAfter(LocalDateTime date);

    /**
     * BUSCA USUARIOS POR COINCIDENCIA PARCIAL EN EL NOMBRE COMPLETO
     *
     * IMPLEMENTO BUSQUEDA FLEXIBLE QUE PERMITE ENCONTRAR USUARIOS
     * MEDIANTE COINCIDENCIAS PARCIALES EN SU NOMBRE COMPLETO.
     * LA BUSQUEDA IGNORA MAYUSCULAS Y MINUSCULAS.
     *
     * @param fullName TEXTO A BUSCAR EN EL NOMBRE COMPLETO
     * @return LISTA DE USUARIOS CON COINCIDENCIAS EN EL NOMBRE
     */
    List<User> findByFullNameContainingIgnoreCase(String fullName);

    /**
     * BUSQUEDA COMBINADA POR USERNAME O EMAIL
     *
     * CONSULTA PERSONALIZADA QUE PERMITE BUSCAR UN USUARIO USANDO
     * CUALQUIERA DE SUS IDENTIFICADORES UNICOS. FACILITA PROCESOS
     * DE LOGIN DONDE EL USUARIO PUEDE USAR EMAIL O USERNAME INDISTINTAMENTE.
     *
     * @param username NOMBRE DE USUARIO A BUSCAR
     * @param email EMAIL A BUSCAR
     * @return OPTIONAL CON EL USUARIO ENCONTRADO
     */
    @Query("SELECT u FROM User u WHERE u.username = :username OR u.email = :email")
    Optional<User> findByUsernameOrEmail(@Param("username") String username, @Param("email") String email);

    /**
     * CUENTA USUARIOS POR ROL ESPECIFICO
     *
     * OBTENGO LA CANTIDAD TOTAL DE USUARIOS QUE TIENEN ASIGNADO
     * UN ROL DETERMINADO. ESENCIAL PARA ESTADISTICAS Y REPORTES
     * ADMINISTRATIVOS DEL SISTEMA.
     *
     * @param role ROL A CONTAR
     * @return NUMERO TOTAL DE USUARIOS CON EL ROL ESPECIFICADO
     */
    long countByRole(UserRole role);

    /**
     * CUENTA USUARIOS ACTIVOS EN EL SISTEMA
     *
     * CALCULO EL NUMERO TOTAL DE USUARIOS HABILITADOS Y ACTIVOS.
     * METRICA IMPORTANTE PARA EVALUAR EL NIVEL DE ACTIVIDAD
     * Y ADOPCION DEL SISTEMA.
     *
     * @return NUMERO TOTAL DE USUARIOS ACTIVOS
     */
    long countByActiveTrue();

    /**
     * BUSCA USUARIOS CON PRESTAMOS VENCIDOS MEDIANTE CONSULTA PERSONALIZADA
     *
     * IMPLEMENTO UNA CONSULTA COMPLEJA QUE IDENTIFICA USUARIOS QUE TIENEN
     * PRESTAMOS ACTIVOS CUYA FECHA DE VENCIMIENTO YA HA PASADO.
     * UTIL PARA PROCESOS DE NOTIFICACION Y GESTION DE MULTAS.
     *
     * @return LISTA DE USUARIOS CON PRESTAMOS VENCIDOS
     */
    @Query("SELECT DISTINCT u FROM User u JOIN u.loans l " +
            "WHERE l.returnedAt IS NULL AND l.dueDate < CURRENT_DATE")
    List<User> findUsersWithOverdueLoans();

    /**
     * BUSCA USUARIOS CON MAS PRESTAMOS REALIZADOS
     *
     * CONSULTA QUE IDENTIFICA LOS USUARIOS MAS ACTIVOS DEL SISTEMA
     * BASANDOSE EN LA CANTIDAD TOTAL DE PRESTAMOS REALIZADOS.
     * ORDENA DESCENDENTEMENTE Y PERMITE LIMITAR RESULTADOS.
     *
     * @param pageable CONFIGURACION DE PAGINACION Y ORDENAMIENTO
     * @return PAGINA CON LOS USUARIOS MAS ACTIVOS
     */
    @Query("SELECT u FROM User u LEFT JOIN u.loans l " +
            "GROUP BY u ORDER BY COUNT(l) DESC")
    Page<User> findMostActiveUsers(Pageable pageable);

    /**
     * BUSCA USUARIOS SIN PRESTAMOS REALIZADOS
     *
     * IDENTIFICO USUARIOS QUE NUNCA HAN REALIZADO PRESTAMOS EN EL SISTEMA.
     * UTIL PARA CAMPAÑAS DE ACTIVACION Y ANALISIS DE ADOPCION
     * DE LOS SERVICIOS DE LA BIBLIOTECA.
     *
     * @return LISTA DE USUARIOS SIN HISTORIAL DE PRESTAMOS
     */
    @Query("SELECT u FROM User u WHERE u.loans IS EMPTY")
    List<User> findUsersWithoutLoans();

    /**
     * BUSCA USUARIOS CON PRESTAMOS ACTIVOS
     *
     * LOCALIZO USUARIOS QUE ACTUALMENTE TIENEN LIBROS EN PRESTAMO
     * (PRESTAMOS NO DEVUELTOS). IMPORTANTE PARA GESTION DE INVENTARIO
     * Y SEGUIMIENTO DE LIBROS EN CIRCULACION.
     *
     * @return LISTA DE USUARIOS CON PRESTAMOS ACTIVOS
     */
    @Query("SELECT DISTINCT u FROM User u JOIN u.loans l " +
            "WHERE l.returnedAt IS NULL")
    List<User> findUsersWithActiveLoans();

    /**
     * BUSQUEDA AVANZADA CON MULTIPLES CRITERIOS
     *
     * CONSULTA FLEXIBLE QUE PERMITE BUSCAR USUARIOS COMBINANDO
     * DIFERENTES CRITERIOS DE FILTRADO. ACEPTA VALORES NULOS
     * PARA IGNORAR FILTROS NO APLICABLES.
     *
     * @param fullName FILTRO POR NOMBRE (OPCIONAL)
     * @param email FILTRO POR EMAIL (OPCIONAL)
     * @param role FILTRO POR ROL (OPCIONAL)
     * @param active FILTRO POR ESTADO (OPCIONAL)
     * @return LISTA DE USUARIOS QUE CUMPLEN LOS CRITERIOS
     */
    @Query("SELECT u FROM User u WHERE " +
            "(:fullName IS NULL OR LOWER(u.fullName) LIKE LOWER(CONCAT('%', :fullName, '%'))) AND " +
            "(:email IS NULL OR LOWER(u.email) LIKE LOWER(CONCAT('%', :email, '%'))) AND " +
            "(:role IS NULL OR u.role = :role) AND " +
            "(:active IS NULL OR u.active = :active)")
    List<User> findByMultipleCriteria(@Param("fullName") String fullName,
                                      @Param("email") String email,
                                      @Param("role") UserRole role,
                                      @Param("active") Boolean active);

    /**
     * BUSCA USUARIOS CREADOS EN UN RANGO DE FECHAS
     *
     * LOCALIZO USUARIOS REGISTRADOS ENTRE DOS FECHAS ESPECIFICAS.
     * FUNDAMENTAL PARA GENERAR REPORTES PERIODICOS DE REGISTRO
     * Y ANALISIS DE CRECIMIENTO DEL SISTEMA.
     *
     * @param startDate FECHA INICIAL DEL RANGO
     * @param endDate FECHA FINAL DEL RANGO
     * @return LISTA DE USUARIOS CREADOS EN EL PERIODO
     */
    @Query("SELECT u FROM User u WHERE u.createdAt BETWEEN :startDate AND :endDate")
    List<User> findByCreatedAtBetween(@Param("startDate") LocalDateTime startDate,
                                      @Param("endDate") LocalDateTime endDate);

    /**
     * OBTIENE ESTADISTICAS DE USUARIOS POR ROL
     *
     * CONSULTA QUE GENERA UN RESUMEN ESTADISTICO AGRUPANDO
     * USUARIOS POR ROL Y CONTANDO LA CANTIDAD EN CADA CATEGORIA.
     * RESULTA EN UNA ESTRUCTURA DE DATOS UTIL PARA DASHBOARDS.
     *
     * @return LISTA DE ARRAYS CON [ROL, CANTIDAD]
     */
    @Query("SELECT u.role, COUNT(u) FROM User u GROUP BY u.role")
    List<Object[]> getUserStatsByRole();

    /**
     * BUSCA USUARIOS ACTIVOS ORDENADOS POR FECHA DE REGISTRO
     *
     * OBTENGO LISTA DE USUARIOS ACTIVOS ORDENADA CRONOLOGICAMENTE
     * POR FECHA DE CREACION. UTIL PARA MOSTRAR USUARIOS RECIENTES
     * EN INTERFACES ADMINISTRATIVAS.
     *
     * @return LISTA DE USUARIOS ACTIVOS ORDENADOS POR FECHA
     */
    List<User> findByActiveTrueOrderByCreatedAtDesc();

    /**
     * BUSCA USUARIOS POR PATRON EN MULTIPLE CAMPOS
     *
     * BUSQUEDA INTEGRAL QUE EXAMINA COINCIDENCIAS EN USERNAME,
     * EMAIL Y NOMBRE COMPLETO SIMULTANEAMENTE. PROPORCIONA
     * FUNCIONALIDAD DE BUSQUEDA GLOBAL EN EL SISTEMA.
     *
     * @param searchTerm TERMINO DE BUSQUEDA A APLICAR
     * @return LISTA DE USUARIOS CON COINCIDENCIAS
     */
    @Query("SELECT u FROM User u WHERE " +
            "LOWER(u.username) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
            "LOWER(u.email) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
            "LOWER(u.fullName) LIKE LOWER(CONCAT('%', :searchTerm, '%'))")
    List<User> findByGlobalSearch(@Param("searchTerm") String searchTerm);

    /**
     * CUENTA USUARIOS REGISTRADOS HOY - VERSION CORREGIDA
     *
     * CALCULO LA CANTIDAD DE USUARIOS QUE SE REGISTRARON EN LA FECHA ACTUAL.
     * METRICA DIARIA IMPORTANTE PARA MONITOREAR EL CRECIMIENTO
     * Y LA ACTIVIDAD DE REGISTRO EN EL SISTEMA.
     *
     * CORRIJO LA CONSULTA PARA EVITAR PROBLEMAS DE TIPOS DE DATOS
     * USANDO CAST PARA CONVERTIR CORRECTAMENTE LAS FECHAS.
     *
     * @return NUMERO DE USUARIOS REGISTRADOS HOY
     */
    @Query("SELECT COUNT(u) FROM User u WHERE DATE(u.createdAt) = DATE(CURRENT_TIMESTAMP)")
    long countUsersRegisteredToday();

    /**
     * BUSCA USUARIOS ADMINISTRADORES Y BIBLIOTECARIOS
     *
     * CONSULTA OPTIMIZADA QUE OBTIENE USUARIOS CON PERMISOS
     * ADMINISTRATIVOS (ADMIN Y LIBRARIAN). UTIL PARA LISTADOS
     * DE PERSONAL Y GESTION DE PERMISOS.
     *
     * @return LISTA DE USUARIOS CON ROLES ADMINISTRATIVOS
     */
    @Query("SELECT u FROM User u WHERE u.role IN ('ADMIN', 'LIBRARIAN')")
    List<User> findAdministrativeUsers();

    /**
     * BUSCA USUARIOS CON TELEFONO REGISTRADO
     *
     * LOCALIZO USUARIOS QUE TIENEN NUMERO DE TELEFONO CONFIGURADO
     * EN SU PERFIL. IMPORTANTE PARA CAMPAÑAS DE COMUNICACION
     * Y NOTIFICACIONES TELEFONICAS.
     *
     * @return LISTA DE USUARIOS CON TELEFONO
     */
    @Query("SELECT u FROM User u WHERE u.phone IS NOT NULL AND u.phone != ''")
    List<User> findUsersWithPhone();
}