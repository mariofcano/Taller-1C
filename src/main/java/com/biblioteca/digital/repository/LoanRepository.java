package com.biblioteca.digital.repository;

import com.biblioteca.digital.model.Loan;
import com.biblioteca.digital.model.LoanStatus;
import com.biblioteca.digital.model.User;
import com.biblioteca.digital.model.Book;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * REPOSITORIO JPA PARA LA GESTION DE ENTIDADES LOAN
 *
 * ESTA INTERFAZ PROPORCIONA OPERACIONES CRUD ESPECIALIZADAS Y CONSULTAS AVANZADAS
 * PARA LA GESTION COMPLETA DEL SISTEMA DE PRESTAMOS DE LA BIBLIOTECA DIGITAL.
 * INCLUYO METODOS OPTIMIZADOS PARA CONTROL DE VENCIMIENTOS, CALCULO DE MULTAS,
 * ESTADISTICAS DE PRESTAMOS Y SEGUIMIENTO DE DISPONIBILIDAD.
 *
 * LAS CONSULTAS ESTAN DISEÃ‘ADAS PARA SOPORTAR TODAS LAS OPERACIONES CRITICAS
 * DEL SISTEMA DE PRESTAMOS, DESDE LA GESTION DIARIA HASTA REPORTES GERENCIALES.
 *
 * @author MARIO FLORES
 * @version 1.0
 * @since 2025-05-26
 *
 * @see Loan
 * @see LoanStatus
 * @see User
 * @see Book
 * @see org.springframework.data.jpa.repository.JpaRepository
 */
@Repository
public interface LoanRepository extends JpaRepository<Loan, Long> {

    /**
     * BUSCA PRESTAMOS POR USUARIO ESPECIFICO
     *
     * UTILIZO ESTE METODO PARA OBTENER TODOS LOS PRESTAMOS REALIZADOS
     * POR UN USUARIO DETERMINADO, TANTO ACTIVOS COMO HISTORICOS.
     * ES FUNDAMENTAL PARA MOSTRAR EL HISTORIAL COMPLETO DE ACTIVIDAD
     * DE CADA USUARIO EN EL SISTEMA.
     *
     * @param user ENTIDAD USER DEL CUAL QUIERO OBTENER LOS PRESTAMOS
     * @return LISTA COMPLETA DE PRESTAMOS DEL USUARIO
     */
    List<Loan> findByUser(User user);

    /**
     * BUSCA PRESTAMOS POR LIBRO ESPECIFICO
     *
     * IMPLEMENTO ESTA CONSULTA PARA RASTREAR EL HISTORIAL COMPLETO
     * DE PRESTAMOS DE UN LIBRO PARTICULAR. ME PERMITE ANALIZAR
     * LA POPULARIDAD Y FRECUENCIA DE USO DE CADA EJEMPLAR
     * EN LA COLECCION DE LA BIBLIOTECA.
     *
     * @param book ENTIDAD BOOK DE LA CUAL QUIERO EL HISTORIAL
     * @return LISTA DE TODOS LOS PRESTAMOS DEL LIBRO
     */
    List<Loan> findByBook(Book book);

    /**
     * BUSCA PRESTAMOS POR ESTADO ESPECIFICO
     *
     * CREO ESTE METODO PARA FILTRAR PRESTAMOS SEGUN SU ESTADO ACTUAL.
     * ES ESENCIAL PARA OPERACIONES COMO BUSCAR TODOS LOS PRESTAMOS
     * ACTIVOS, VENCIDOS, DEVUELTOS O CUALQUIER OTRO ESTADO DEFINIDO
     * EN EL ENUM LOANSTATUS.
     *
     * @param status ESTADO DE PRESTAMO QUE DESEO FILTRAR
     * @return LISTA DE PRESTAMOS CON EL ESTADO ESPECIFICADO
     */
    List<Loan> findByStatus(LoanStatus status);

    /**
     * BUSCA PRESTAMOS ACTIVOS DE UN USUARIO
     *
     * IMPLEMENTO ESTA CONSULTA PERSONALIZADA PARA OBTENER SOLO
     * LOS PRESTAMOS QUE UN USUARIO TIENE ACTUALMENTE SIN DEVOLVER.
     * VERIFICO QUE EL CAMPO returnedAt SEA NULL, LO QUE INDICA
     * QUE EL LIBRO AUN ESTA EN PODER DEL USUARIO.
     *
     * @param user USUARIO DEL CUAL QUIERO LOS PRESTAMOS ACTIVOS
     * @return LISTA DE PRESTAMOS SIN DEVOLVER DEL USUARIO
     */
    @Query("SELECT l FROM Loan l WHERE l.user = :user AND l.returnedAt IS NULL")
    List<Loan> findActiveByUser(@Param("user") User user);

    /**
     * CUENTA PRESTAMOS ACTIVOS DE UN USUARIO
     *
     * CREO ESTA CONSULTA DE CONTEO PARA VERIFICAR RAPIDAMENTE
     * CUANTOS PRESTAMOS ACTIVOS TIENE UN USUARIO SIN CARGAR
     * TODAS LAS ENTIDADES. ES MUY EFICIENTE PARA VALIDACIONES
     * DE LIMITES DE PRESTAMOS SIMULTANEOS.
     *
     * @param user USUARIO DEL CUAL DESEO CONTAR PRESTAMOS ACTIVOS
     * @return NUMERO DE PRESTAMOS ACTIVOS DEL USUARIO
     */
    @Query("SELECT COUNT(l) FROM Loan l WHERE l.user = :user AND l.returnedAt IS NULL")
    long countActiveByUser(@Param("user") User user);

    /**
     * BUSCA PRESTAMOS VENCIDOS EN EL SISTEMA
     *
     * IMPLEMENTO ESTA CONSULTA CRITICA PARA IDENTIFICAR TODOS
     * LOS PRESTAMOS QUE HAN SUPERADO SU FECHA DE VENCIMIENTO
     * Y AUN NO HAN SIDO DEVUELTOS. UTILIZO CURRENT_DATE PARA
     * COMPARAR CON LA FECHA ACTUAL DEL SISTEMA.
     *
     * @return LISTA DE PRESTAMOS VENCIDOS QUE REQUIEREN ATENCION
     */
    @Query("SELECT l FROM Loan l WHERE l.returnedAt IS NULL AND l.dueDate < CURRENT_DATE")
    List<Loan> findOverdueLoans();

    /**
     * BUSCA PRESTAMOS QUE VENCEN HOY
     *
     * CREO ESTA CONSULTA PARA IDENTIFICAR PRESTAMOS CUYA FECHA
     * LIMITE ES EXACTAMENTE HOY. ES FUNDAMENTAL PARA SISTEMAS
     * DE NOTIFICACION QUE ALERTAN A LOS USUARIOS SOBRE
     * VENCIMIENTOS INMINENTES EN EL MISMO DIA.
     *
     * @return LISTA DE PRESTAMOS QUE VENCEN EN LA FECHA ACTUAL
     */
    @Query("SELECT l FROM Loan l WHERE l.returnedAt IS NULL AND l.dueDate = CURRENT_DATE")
    List<Loan> findLoansDueToday();

    /**
     * BUSCA PRESTAMOS QUE VENCEN EN LOS PROXIMOS DIAS
     *
     * IMPLEMENTO ESTA CONSULTA NATIVA PARA IDENTIFICAR PRESTAMOS QUE VENCERAN
     * DENTRO DEL NUMERO DE DIAS ESPECIFICADO. UTILIZO SQL NATIVO PARA
     * GARANTIZAR COMPATIBILIDAD TOTAL CON H2 DATABASE Y EVITAR PROBLEMAS
     * DE TIPOS DE DATOS EN HQL. LA CONSULTA ES IDEAL PARA RECORDATORIOS PREVENTIVOS.
     *
     * @param days NUMERO DE DIAS DE ANTICIPACION PARA LA BUSQUEDA
     * @return LISTA DE PRESTAMOS QUE VENCEN DENTRO DEL PERIODO ESPECIFICADO
     */
    @Query(value = "SELECT * FROM loans l WHERE l.returned_at IS NULL AND l.due_date BETWEEN CURRENT_DATE AND DATEADD('DAY', :days, CURRENT_DATE)", nativeQuery = true)
    List<Loan> findLoansDueSoon(@Param("days") int days);

    /**
     * BUSCA PRESTAMOS DEVUELTOS EN UN RANGO DE FECHAS
     *
     * IMPLEMENTO ESTA CONSULTA PARA GENERAR REPORTES DE DEVOLUCIONES
     * EN PERIODOS ESPECIFICOS. FILTRO POR EL CAMPO returnedAt
     * QUE CONTIENE LA FECHA Y HORA EXACTA DE DEVOLUCION.
     * ES UTIL PARA ANALISIS DE ACTIVIDAD PERIODICA.
     *
     * @param startDate FECHA INICIAL DEL PERIODO DE BUSQUEDA
     * @param endDate FECHA FINAL DEL PERIODO DE BUSQUEDA
     * @return LISTA DE PRESTAMOS DEVUELTOS EN EL RANGO ESPECIFICADO
     */
    @Query("SELECT l FROM Loan l WHERE l.returnedAt BETWEEN :startDate AND :endDate")
    List<Loan> findReturnedBetween(@Param("startDate") LocalDateTime startDate,
                                   @Param("endDate") LocalDateTime endDate);

    /**
     * BUSCA PRESTAMOS REALIZADOS EN UN RANGO DE FECHAS
     *
     * UTILIZO ESTE METODO DERIVADO DE SPRING DATA JPA PARA ENCONTRAR
     * PRESTAMOS CUYA FECHA DE INICIO ESTE DENTRO DE UN PERIODO DETERMINADO.
     * ES FUNDAMENTAL PARA GENERAR ESTADISTICAS DE ACTIVIDAD
     * Y REPORTES DE PRESTAMOS POR PERIODOS TEMPORALES.
     *
     * @param startDate FECHA INICIAL DEL PERIODO
     * @param endDate FECHA FINAL DEL PERIODO
     * @return LISTA DE PRESTAMOS INICIADOS EN EL RANGO DE FECHAS
     */
    List<Loan> findByLoanDateBetween(LocalDate startDate, LocalDate endDate);

    /**
     * BUSCA PRESTAMOS CON MULTAS PENDIENTES DE PAGO
     *
     * CREO ESTA CONSULTA PARA IDENTIFICAR PRESTAMOS QUE TIENEN
     * MULTAS APLICADAS PERO AUN NO HAN SIDO PAGADAS. VERIFICO
     * QUE EL MONTO DE MULTA SEA MAYOR A CERO Y QUE EL CAMPO
     * finePaid SEA FALSE.
     *
     * @return LISTA DE PRESTAMOS CON MULTAS PENDIENTES DE COBRO
     */
    @Query("SELECT l FROM Loan l WHERE l.fineAmount > 0 AND l.finePaid = false")
    List<Loan> findLoansWithUnpaidFines();

    /**
     * CALCULA EL MONTO TOTAL DE MULTAS PENDIENTES
     *
     * IMPLEMENTO ESTA CONSULTA DE AGREGACION PARA SUMAR TODAS
     * LAS MULTAS NO PAGADAS DEL SISTEMA. ES UNA METRICA FINANCIERA
     * IMPORTANTE PARA CONTROL DE INGRESOS PENDIENTES Y REPORTES
     * DE COBRANZA DE LA BIBLIOTECA.
     *
     * @return MONTO TOTAL EN BIGDECIMAL DE MULTAS POR COBRAR
     */
    @Query("SELECT SUM(l.fineAmount) FROM Loan l WHERE l.fineAmount > 0 AND l.finePaid = false")
    BigDecimal calculateTotalUnpaidFines();

    /**
     * BUSCA PRESTAMOS POR USUARIO CON PAGINACION
     *
     * UTILIZO ESTA VERSION PAGINADA DEL METODO findByUser PARA
     * MANEJAR EFICIENTEMENTE USUARIOS CON MUCHOS PRESTAMOS.
     * LA PAGINACION MEJORA EL RENDIMIENTO Y LA EXPERIENCIA
     * DE USUARIO EN LAS INTERFACES WEB.
     *
     * @param user USUARIO DEL CUAL DESEO LOS PRESTAMOS
     * @param pageable CONFIGURACION DE PAGINACION Y ORDENAMIENTO
     * @return PAGINA DE PRESTAMOS DEL USUARIO ESPECIFICADO
     */
    Page<Loan> findByUser(User user, Pageable pageable);

    /**
     * BUSCA PRESTAMOS RENOVADOS
     *
     * IMPLEMENTO ESTA CONSULTA PARA ENCONTRAR PRESTAMOS QUE HAN SIDO
     * RENOVADOS AL MENOS UNA VEZ. VERIFICO QUE EL CAMPO renewals
     * SEA MAYOR QUE CERO, LO QUE INDICA QUE EL USUARIO HA SOLICITADO
     * EXTENSION DEL PLAZO DE DEVOLUCION.
     *
     * @return LISTA DE PRESTAMOS QUE HAN SIDO RENOVADOS
     */
    @Query("SELECT l FROM Loan l WHERE l.renewals > 0")
    List<Loan> findRenewedLoans();

    /**
     * BUSCA PRESTAMOS CON MULTIPLES RENOVACIONES
     *
     * CREO ESTA CONSULTA PARA IDENTIFICAR PRESTAMOS QUE HAN SIDO
     * RENOVADOS VARIAS VECES. ESTO ME AYUDA A DETECTAR PATRONES
     * DE USO EXCESIVO O POSIBLES PROBLEMAS DE DISPONIBILIDAD
     * DE LIBROS POPULARES.
     *
     * @param minRenewals NUMERO MINIMO DE RENOVACIONES PARA FILTRAR
     * @return LISTA DE PRESTAMOS CON RENOVACIONES IGUALES O SUPERIORES AL MINIMO
     */
    @Query("SELECT l FROM Loan l WHERE l.renewals >= :minRenewals")
    List<Loan> findLoansWithMultipleRenewals(@Param("minRenewals") int minRenewals);

    /**
     * BUSCA PRESTAMOS DE UN LIBRO EN UN PERIODO
     *
     * IMPLEMENTO ESTA CONSULTA COMBINADA PARA OBTENER EL HISTORIAL
     * DE PRESTAMOS DE UN LIBRO ESPECIFICO DENTRO DE UN RANGO
     * DE FECHAS DETERMINADO. ES UTIL PARA ANALIZAR LA POPULARIDAD
     * TEMPORAL DE CIERTOS LIBROS.
     *
     * @param book LIBRO DEL CUAL DESEO EL HISTORIAL
     * @param startDate FECHA INICIAL DEL PERIODO
     * @param endDate FECHA FINAL DEL PERIODO
     * @return LISTA DE PRESTAMOS DEL LIBRO EN EL PERIODO ESPECIFICADO
     */
    @Query("SELECT l FROM Loan l WHERE l.book = :book AND l.loanDate BETWEEN :startDate AND :endDate")
    List<Loan> findByBookAndPeriod(@Param("book") Book book,
                                   @Param("startDate") LocalDate startDate,
                                   @Param("endDate") LocalDate endDate);

    /**
     * BUSCA PRESTAMOS ACTIVOS POR LIBRO
     *
     * CREO ESTA CONSULTA PARA IDENTIFICAR QUE USUARIOS TIENEN
     * ACTUALMENTE EN PRESTAMO UN LIBRO ESPECIFICO. ES FUNDAMENTAL
     * PARA CONTROL DE INVENTARIO Y SEGUIMIENTO DE EJEMPLARES
     * EN CIRCULACION.
     *
     * @param book LIBRO DEL CUAL QUIERO LOS PRESTAMOS ACTIVOS
     * @return LISTA DE PRESTAMOS ACTIVOS DEL LIBRO ESPECIFICADO
     */
    @Query("SELECT l FROM Loan l WHERE l.book = :book AND l.returnedAt IS NULL")
    List<Loan> findActiveByBook(@Param("book") Book book);

    /**
     * CUENTA PRESTAMOS ACTIVOS POR LIBRO
     *
     * IMPLEMENTO ESTA CONSULTA DE CONTEO PARA VERIFICAR RAPIDAMENTE
     * CUANTAS COPIAS DE UN LIBRO ESTAN ACTUALMENTE PRESTADAS.
     * ES MUY EFICIENTE PARA VALIDACIONES DE DISPONIBILIDAD
     * SIN CARGAR ENTIDADES COMPLETAS.
     *
     * @param book LIBRO DEL CUAL DESEO CONTAR PRESTAMOS ACTIVOS
     * @return NUMERO DE COPIAS ACTUALMENTE PRESTADAS DEL LIBRO
     */
    @Query("SELECT COUNT(l) FROM Loan l WHERE l.book = :book AND l.returnedAt IS NULL")
    long countActiveByBook(@Param("book") Book book);

    /**
     * BUSCA PRESTAMOS POR ESTADO CON PAGINACION
     *
     * UTILIZO ESTA VERSION PAGINADA PARA MANEJAR EFICIENTEMENTE
     * GRANDES VOLIMENES DE PRESTAMOS DE UN ESTADO ESPECIFICO.
     * LA PAGINACION ES ESPECIALMENTE IMPORTANTE PARA ESTADOS
     * COMO 'RETURNED' QUE PUEDEN TENER MILES DE REGISTROS.
     *
     * @param status ESTADO DE PRESTAMO A FILTRAR
     * @param pageable CONFIGURACION DE PAGINACION Y ORDENAMIENTO
     * @return PAGINA DE PRESTAMOS CON EL ESTADO ESPECIFICADO
     */
    Page<Loan> findByStatus(LoanStatus status, Pageable pageable);

    /**
     * BUSCA PRESTAMOS DEVUELTOS TARDE
     *
     * IMPLEMENTO ESTA CONSULTA PARA BUSCAR DIRECTAMENTE
     * POR EL ESTADO 'RETURNED_LATE' QUE IDENTIFICA PRESTAMOS
     * QUE FUERON DEVUELTOS DESPUES DE LA FECHA LIMITE.
     * ES UTIL PARA ANALISIS DE CUMPLIMIENTO Y MULTAS.
     *
     * @return LISTA DE PRESTAMOS QUE FUERON DEVUELTOS DESPUES DE LA FECHA LIMITE
     */
    @Query("SELECT l FROM Loan l WHERE l.returnedAt IS NOT NULL AND l.status = 'RETURNED_LATE'")
    List<Loan> findLateReturns();

    /**
     * CALCULA LA DURACION PROMEDIO DE PRESTAMOS
     *
     * IMPLEMENTO ESTA CONSULTA PARA OBTENER UNA APROXIMACION
     * DE LA DURACION PROMEDIO DE LOS PRESTAMOS. CONVIERTO
     * LA FECHA A FORMATO NUMERICO PARA REALIZAR EL CALCULO.
     * ES UTIL PARA ANALISIS ESTADISTICOS BASICOS.
     *
     * @return DURACION PROMEDIO APROXIMADA EN FORMATO DOUBLE
     */
    @Query("SELECT AVG(CAST(l.loanDate AS double)) FROM Loan l WHERE l.returnedAt IS NOT NULL")
    Double calculateAverageLoanDuration();

    /**
     * BUSCA USUARIOS CON MAS PRESTAMOS REALIZADOS
     *
     * IMPLEMENTO ESTA CONSULTA DE AGREGACION PARA IDENTIFICAR
     * LOS USUARIOS MAS ACTIVOS DEL SISTEMA. AGRUPA POR USUARIO
     * Y CUENTA SUS PRESTAMOS, ORDENANDO DESCENDENTEMENTE
     * PARA MOSTRAR LOS MAS ACTIVOS PRIMERO.
     *
     * @param pageable CONFIGURACION DE PAGINACION PARA LIMITAR RESULTADOS
     * @return PAGINA CON USUARIOS Y SUS CONTEOS DE PRESTAMOS
     */
    @Query("SELECT l.user, COUNT(l) as loanCount FROM Loan l " +
            "GROUP BY l.user ORDER BY loanCount DESC")
    Page<Object[]> findMostActiveUsers(Pageable pageable);

    /**
     * BUSCA LIBROS MAS PRESTADOS
     *
     * CREO ESTA CONSULTA DE AGREGACION PARA IDENTIFICAR LOS LIBROS
     * MAS POPULARES BASADO EN EL NUMERO TOTAL DE PRESTAMOS.
     * AGRUPA POR LIBRO Y CUENTA SUS PRESTAMOS, PROPORCIONANDO
     * DATOS VALIOSOS PARA ANALISIS DE DEMANDA.
     *
     * @param pageable CONFIGURACION DE PAGINACION Y ORDENAMIENTO
     * @return PAGINA CON LIBROS Y SUS CONTEOS DE PRESTAMOS
     */
    @Query("SELECT l.book, COUNT(l) as loanCount FROM Loan l " +
            "GROUP BY l.book ORDER BY loanCount DESC")
    Page<Object[]> findMostBorrowedBooks(Pageable pageable);

    /**
     * OBTIENE ESTADISTICAS DE PRESTAMOS POR ESTADO
     *
     * IMPLEMENTO ESTA CONSULTA DE AGREGACION PARA GENERAR
     * ESTADISTICAS DE DISTRIBUCION DE PRESTAMOS SEGUN SU ESTADO.
     * ES FUNDAMENTAL PARA DASHBOARDS Y REPORTES GERENCIALES
     * QUE MUESTRAN EL ESTADO GENERAL DEL SISTEMA.
     *
     * @return LISTA DE ARRAYS CON ESTADO Y CANTIDAD DE PRESTAMOS
     */
    @Query("SELECT l.status, COUNT(l) FROM Loan l GROUP BY l.status")
    List<Object[]> getLoanStatsByStatus();

    /**
     * OBTIENE ESTADISTICAS DE PRESTAMOS POR MES
     *
     * CREO ESTA CONSULTA PARA GENERAR ESTADISTICAS MENSUALES
     * DE PRESTAMOS. UTILIZO FUNCIONES YEAR Y MONTH QUE SON
     * COMPATIBLES CON H2 Y LA MAYORIA DE BASES DE DATOS.
     * ES ESENCIAL PARA ANALISIS DE TENDENCIAS TEMPORALES.
     *
     * @return LISTA DE ARRAYS CON AÃ‘O, MES Y CANTIDAD DE PRESTAMOS
     */
    @Query("SELECT YEAR(l.loanDate), MONTH(l.loanDate), COUNT(l) FROM Loan l " +
            "GROUP BY YEAR(l.loanDate), MONTH(l.loanDate) ORDER BY YEAR(l.loanDate), MONTH(l.loanDate)")
    List<Object[]> getLoanStatsByMonth();

    /**
     * BUSCA PRESTAMOS DE USUARIO EN UN RANGO DE FECHAS
     *
     * IMPLEMENTO ESTA CONSULTA COMBINADA PARA OBTENER PRESTAMOS
     * DE UN USUARIO ESPECIFICO DENTRO DE UN PERIODO DETERMINADO.
     * ES UTIL PARA GENERAR REPORTES PERSONALIZADOS Y ANALIZAR
     * PATRONES DE USO INDIVIDUALES.
     *
     * @param user USUARIO DEL CUAL DESEO LOS PRESTAMOS
     * @param startDate FECHA INICIAL DEL PERIODO
     * @param endDate FECHA FINAL DEL PERIODO
     * @return LISTA DE PRESTAMOS DEL USUARIO EN EL PERIODO ESPECIFICADO
     */
    @Query("SELECT l FROM Loan l WHERE l.user = :user AND l.loanDate BETWEEN :startDate AND :endDate")
    List<Loan> findByUserAndPeriod(@Param("user") User user,
                                   @Param("startDate") LocalDate startDate,
                                   @Param("endDate") LocalDate endDate);

    /**
     * BUSCA PRESTAMOS CON OBSERVACIONES ESPECIALES
     *
     * CREO ESTA CONSULTA PARA IDENTIFICAR PRESTAMOS QUE TIENEN
     * NOTAS O COMENTARIOS REGISTRADOS. ESTO ME AYUDA A HACER
     * SEGUIMIENTO DE CASOS ESPECIALES QUE REQUIEREN ATENCION
     * PARTICULAR O TIENEN CIRCUNSTANCIAS ESPECIALES.
     *
     * @return LISTA DE PRESTAMOS QUE CONTIENEN OBSERVACIONES
     */
    @Query("SELECT l FROM Loan l WHERE l.notes IS NOT NULL AND l.notes != ''")
    List<Loan> findLoansWithNotes();

    /**
     * ACTUALIZA EL ESTADO DE UN PRESTAMO
     *
     * IMPLEMENTO ESTA OPERACION DE ACTUALIZACION PARA CAMBIAR
     * EL ESTADO DE UN PRESTAMO DE FORMA EFICIENTE SIN CARGAR
     * LA ENTIDAD COMPLETA. ES UTIL PARA OPERACIONES BATCH
     * Y ACTUALIZACIONES MASIVAS DE ESTADOS.
     *
     * @param loanId ID DEL PRESTAMO A ACTUALIZAR
     * @param status NUEVO ESTADO A ASIGNAR
     */
    @Modifying
    @Query("UPDATE Loan l SET l.status = :status WHERE l.id = :loanId")
    void updateLoanStatus(@Param("loanId") Long loanId, @Param("status") LoanStatus status);

    /**
     * MARCA UNA MULTA COMO PAGADA
     *
     * CREO ESTA OPERACION DE ACTUALIZACION PARA PROCESAR
     * PAGOS DE MULTAS DE FORMA EFICIENTE. ACTUALIZA SOLO
     * EL CAMPO finePaid SIN AFECTAR OTROS DATOS DEL PRESTAMO.
     * ES ESENCIAL PARA EL SISTEMA DE COBRANZAS.
     *
     * @param loanId ID DEL PRESTAMO CUYA MULTA SE MARCA COMO PAGADA
     */
    @Modifying
    @Query("UPDATE Loan l SET l.finePaid = true WHERE l.id = :loanId")
    void markFineAsPaid(@Param("loanId") Long loanId);

    /**
     * ACTUALIZA LA FECHA DE DEVOLUCION DE UN PRESTAMO
     *
     * IMPLEMENTO ESTA OPERACION PARA REGISTRAR DEVOLUCIONES
     * DE FORMA EFICIENTE. ACTUALIZA EL CAMPO returnedAt
     * CON LA FECHA Y HORA EXACTA DE DEVOLUCION DEL LIBRO.
     * ES CRITICA PARA EL CONTROL DE INVENTARIO.
     *
     * @param loanId ID DEL PRESTAMO A ACTUALIZAR
     * @param returnDate FECHA Y HORA DE DEVOLUCION A REGISTRAR
     */
    @Modifying
    @Query("UPDATE Loan l SET l.returnedAt = :returnDate WHERE l.id = :loanId")
    void updateReturnDate(@Param("loanId") Long loanId, @Param("returnDate") LocalDateTime returnDate);

    /**
     * CUENTA PRESTAMOS TOTALES DEL SISTEMA
     *
     * CREO ESTA CONSULTA DE CONTEO SIMPLE PARA OBTENER
     * EL NUMERO TOTAL DE PRESTAMOS REGISTRADOS EN EL SISTEMA.
     * ES UNA METRICA BASICA PERO IMPORTANTE PARA ESTADISTICAS
     * GENERALES Y REPORTES EJECUTIVOS.
     *
     * @return NUMERO TOTAL DE PRESTAMOS EN EL SISTEMA
     */
    @Query("SELECT COUNT(l) FROM Loan l")
    long countTotalLoans();

    /**
     * CUENTA PRESTAMOS ACTIVOS DEL SISTEMA
     *
     * IMPLEMENTO ESTA CONSULTA PARA OBTENER EL NUMERO ACTUAL
     * DE PRESTAMOS ACTIVOS EN TODO EL SISTEMA. ES UN INDICADOR
     * CLAVE DEL NIVEL DE ACTIVIDAD Y USO DE LA BIBLIOTECA
     * EN TIEMPO REAL.
     *
     * @return NUMERO DE PRESTAMOS ACTUALMENTE ACTIVOS
     */
    @Query("SELECT COUNT(l) FROM Loan l WHERE l.returnedAt IS NULL")
    long countActiveLoans();

    /**
     * BUSCA PRESTAMOS VENCIDOS DE UN USUARIO ESPECIFICO
     *
     * CREO ESTA CONSULTA COMBINADA PARA IDENTIFICAR PRESTAMOS
     * VENCIDOS DE UN USUARIO PARTICULAR. ES FUNDAMENTAL PARA
     * GESTION PERSONALIZADA DE MOROSOS Y APLICACION DE
     * RESTRICCIONES INDIVIDUALES.
     *
     * @param user USUARIO DEL CUAL DESEO LOS PRESTAMOS VENCIDOS
     * @return LISTA DE PRESTAMOS VENCIDOS DEL USUARIO ESPECIFICADO
     */
    @Query("SELECT l FROM Loan l WHERE l.user = :user AND l.returnedAt IS NULL AND l.dueDate < CURRENT_DATE")
    List<Loan> findOverdueByUser(@Param("user") User user);

    /**
     * BUSCA EL PRESTAMO MAS RECIENTE DE UN USUARIO
     *
     * IMPLEMENTO ESTA CONSULTA PARA OBTENER EL ULTIMO PRESTAMO
     * REALIZADO POR UN USUARIO ESPECIFICO. ORDENO POR FECHA
     * DE PRESTAMO DESCENDENTE PARA OBTENER EL MAS RECIENTE.
     * ES UTIL PARA VALIDACIONES DE HISTORIAL.
     *
     * @param user USUARIO DEL CUAL DESEO EL PRESTAMO MAS RECIENTE
     * @return OPTIONAL CON EL PRESTAMO MAS RECIENTE DEL USUARIO
     */
    @Query("SELECT l FROM Loan l WHERE l.user = :user ORDER BY l.loanDate DESC")
    Optional<Loan> findMostRecentByUser(@Param("user") User user);

    /**
     * BUSCA EL ULTIMO PRESTAMO DE UN LIBRO
     *
     * CREO ESTA CONSULTA PARA RASTREAR EL ULTIMO MOVIMIENTO
     * DE UN LIBRO ESPECIFICO. ORDENO POR FECHA DE PRESTAMO
     * DESCENDENTE PARA OBTENER LA ACTIVIDAD MAS RECIENTE.
     * ES IMPORTANTE PARA SEGUIMIENTO DE EJEMPLARES.
     *
     * @param book LIBRO DEL CUAL DESEO EL PRESTAMO MAS RECIENTE
     * @return OPTIONAL CON EL ULTIMO PRESTAMO DEL LIBRO
     */
    @Query("SELECT l FROM Loan l WHERE l.book = :book ORDER BY l.loanDate DESC")
    Optional<Loan> findMostRecentByBook(@Param("book") Book book);

    /**
     * VERIFICA SI UN USUARIO PUEDE REALIZAR UN NUEVO PRESTAMO
     *
     * IMPLEMENTO ESTA CONSULTA DE CONTEO PARA VALIDAR RAPIDAMENTE
     * SI UN USUARIO HA ALCANZADO EL LIMITE DE PRESTAMOS SIMULTANEOS.
     * ES MAS EFICIENTE QUE CARGAR TODAS LAS ENTIDADES PARA
     * REALIZAR LA VALIDACION.
     *
     * @param user USUARIO A VALIDAR
     * @return NUMERO DE PRESTAMOS ACTIVOS DEL USUARIO
     */
    @Query("SELECT COUNT(l) FROM Loan l WHERE l.user = :user AND l.returnedAt IS NULL")
    long countActiveLoansForUser(@Param("user") User user);

    /**
     * METODO AUXILIAR PARA VERIFICAR SI PUEDE HACER PRESTAMO
     *
     * PROPORCIONO ESTE METODO DEFAULT PARA ENCAPSULAR LA LOGICA
     * DE VALIDACION DE LIMITES DE PRESTAMO. COMBINA EL CONTEO
     * DE PRESTAMOS ACTIVOS CON EL LIMITE MAXIMO PERMITIDO
     * PARA DETERMINAR SI EL USUARIO PUEDE PEDIR MAS LIBROS.
     *
     * @param user USUARIO A VALIDAR
     * @param maxLoans LIMITE MAXIMO DE PRESTAMOS SIMULTANEOS
     * @return TRUE SI PUEDE REALIZAR MAS PRESTAMOS, FALSE EN CASO CONTRARIO
     */
    default boolean canUserBorrow(User user, int maxLoans) {
        long activeLoans = countActiveLoansForUser(user);
        return activeLoans < maxLoans;
    }
}